version: 2.1

orbs:
  node: circleci/node@7.2.1

parameters:
  tf_dir:
    type: string
    default: "infra"   # TF root folder in your repo

jobs:
  # -------------------------------
  # 1) Build + package Lambda
  # -------------------------------
  build_package:
    docker:
      - image: cimg/node:22.21
    working_directory: ~/project
    steps:
      - checkout
      - run:
          name: Install deps
          command: npm ci
      - run:
          name: Build code (esbuild)
          command: node build.mjs
      - run:
          name: Package zip
          command: zip -j lambda.zip dist/index.cjs
      - run:
          name: Show folder structure
          command: |
            echo "== Repo root =="
            ls -la
            echo "== Infra folder =="
            ls -la infra || echo "Infra folder not found!"
      - persist_to_workspace:
          root: .
          paths:
            - lambda.zip
            - << pipeline.parameters.tf_dir >>

  # -------------------------------
  # 2) Terraform Plan
  # -------------------------------
  terraform_plan:
    docker:
      - image: hashicorp/terraform:1.13
    working_directory: ~/project
    environment:
      TF_IN_AUTOMATION: "true"
      TF_INPUT: "false"
    steps:
      # ðŸŸ¢ Attach workspace first (contains infra + lambda.zip)
      - attach_workspace:
          at: ~/project

      # ðŸŸ¢ Checkout after attach â€” keeps workspace contents
      - checkout

      # ðŸ§ª Debug tree (optional)
      - run:
          name: Check folder structure
          command: |
            echo "== Root ==" && ls -la
            echo "== Infra ==" && ls -la "<< pipeline.parameters.tf_dir >>"

      - run:
          name: Terraform Init
          command: |
            cd "<< pipeline.parameters.tf_dir >>" && terraform init -input=false

      - run:
          name: Terraform Validate
          command: |
            cd "<< pipeline.parameters.tf_dir >>" && terraform fmt -check
            cd "<< pipeline.parameters.tf_dir >>" && terraform validate

      - run:
          name: Terraform Plan
          command: |
            cd "<< pipeline.parameters.tf_dir >>" && terraform plan -input=false -out tfplan
            cd "<< pipeline.parameters.tf_dir >>" && terraform show -no-color tfplan > plan.txt
            echo "---- Terraform Plan (excerpt) ----"
            head -n 200 "<< pipeline.parameters.tf_dir >>/plan.txt"

      - store_artifacts:
          path: << pipeline.parameters.tf_dir >>/plan.txt
          destination: plan.txt
      - store_artifacts:
          path: << pipeline.parameters.tf_dir >>/tfplan
          destination: tfplan
      - persist_to_workspace:
          root: .
          paths:
            - << pipeline.parameters.tf_dir >>/tfplan
            - << pipeline.parameters.tf_dir >>/.terraform
            - << pipeline.parameters.tf_dir >>/.terraform.lock.hcl
            - << pipeline.parameters.tf_dir >>/plan.txt

  # -------------------------------
  # 3) Terraform Apply
  # -------------------------------
  terraform_apply:
    docker:
      - image: hashicorp/terraform:1.13
    working_directory: ~/project
    environment:
      TF_IN_AUTOMATION: "true"
      TF_INPUT: "false"
    steps:
      - attach_workspace:
          at: ~/project
      - checkout
      - run:
          name: Check folder before apply
          command: |
            echo "== Root ==" && ls -la
            echo "== Infra ==" && ls -la "<< pipeline.parameters.tf_dir >>"
      - run:
          name: Terraform Init
          command: |
            cd "<< pipeline.parameters.tf_dir >>" && terraform init -input=false
      - run:
          name: Terraform Apply (auto-approved after review)
          command: |
            cd "<< pipeline.parameters.tf_dir >>" && terraform apply -auto-approve tfplan

# -------------------------------
# 4) Workflow
# -------------------------------
workflows:
  version: 2
  plan_review_apply:
    jobs:
      - build_package:
          filters:
            branches:
              only:
                - main
                - /feature\/.*/

      - terraform_plan:
          requires:
            - build_package
          context: [aws-deploy]

      - hold_for_approval:
          type: approval
          requires:
            - terraform_plan
          filters:
            branches:
              only: main

      - terraform_apply:
          requires:
            - hold_for_approval
          context: [aws-deploy]